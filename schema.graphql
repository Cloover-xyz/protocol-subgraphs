
type TokenWhitelist @entity{
  # contracts address
  id: ID!
  # amount of tokens whitelisted
  tokenCount: BigInt!

  # allow indexing by tokens
  tokens: [Token!]!
}

type Token @entity(immutable: true) {
  # token address
  id: ID!
  symbol: String!
  decimals: Int!
}


type NFTWhitelist @entity{
  # contracts address
  id: ID!
  # amount of tokens whitelisted
  collectionCount: BigInt!

  # allow indexing by tokens
  nfts: [NFT!]!
}

type NFT @entity(immutable: true) {
  # collection address
  id: ID!
  # address of the collection creator
  creator: String!
}

type RaffleFactory @entity{
  # contracts address
  id: ID!
  # amount of tokens whitelisted
  raffleCount: BigInt!

  # allow indexing by tokens
  raffles: [Raffle!]! @derivedFrom(field: "raffleFactory")
}

type Raffle @entity{
  # contracts address
  id: ID!

  # allow indexing by raffleCreated by this user
  creator: User!

  # address of the implementation contract
  implementationManager: String!

  # allow indexing by token
  token: Token!
  # allow indexing by nft
  nft: NFT!

  # id of the NFT
  nftId: BigInt!

  # price of the ticket
  ticketPrice: BigInt!

  # duration of the ticket sales
  ticketSalesDuration: BigInt!

  # total ticket on sales
  maxTotalSupply: Int!

  # max amount of tickets per user
  maxTicketAllowedToPurchase: Int!

  # min amount of tickets under insurance
  ticketSalesInsurance: Int!

  # end of the ticket sales in timestamp
  endTicketSales: BigInt!

  # protocol fee rate
  protocolFeeRate: Int!

  # insurance rate applied
  insuranceRate: Int!

  # royalties rate applied
  royaltiesRate: Int!

  # specify if the raffle is in ETH or ERC20
  isETH: Boolean!

  raffleFactory: RaffleFactory!
}



type User @entity{
  # user address
  id: ID!

  # allow indexing by raffleCreated
  rafflesCreated: [Raffle!]! @derivedFrom(field: "creator")
}